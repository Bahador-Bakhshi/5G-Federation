# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ActiveInstances(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, service_id: str=None, num: float=None):  # noqa: E501
        """ActiveInstances - a model defined in Swagger

        :param service_id: The service_id of this ActiveInstances.  # noqa: E501
        :type service_id: str
        :param num: The num of this ActiveInstances.  # noqa: E501
        :type num: float
        """
        self.swagger_types = {
            'service_id': str,
            'num': float
        }

        self.attribute_map = {
            'service_id': 'service_id',
            'num': 'num'
        }
        self._service_id = service_id
        self._num = num

    @classmethod
    def from_dict(cls, dikt) -> 'ActiveInstances':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ActiveInstances of this ActiveInstances.  # noqa: E501
        :rtype: ActiveInstances
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_id(self) -> str:
        """Gets the service_id of this ActiveInstances.

        The id of the network service  # noqa: E501

        :return: The service_id of this ActiveInstances.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: str):
        """Sets the service_id of this ActiveInstances.

        The id of the network service  # noqa: E501

        :param service_id: The service_id of this ActiveInstances.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id

    @property
    def num(self) -> float:
        """Gets the num of this ActiveInstances.

        The number of of the active instances of this type  # noqa: E501

        :return: The num of this ActiveInstances.
        :rtype: float
        """
        return self._num

    @num.setter
    def num(self, num: float):
        """Sets the num of this ActiveInstances.

        The number of of the active instances of this type  # noqa: E501

        :param num: The num of this ActiveInstances.
        :type num: float
        """
        if num is None:
            raise ValueError("Invalid value for `num`, must not be `None`")  # noqa: E501

        self._num = num
