# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class VNFLink(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, required_capacity: float=None, traversal_probability: float=None, latency: float=None):  # noqa: E501
        """VNFLink - a model defined in Swagger

        :param id: The id of this VNFLink.  # noqa: E501
        :type id: str
        :param required_capacity: The required_capacity of this VNFLink.  # noqa: E501
        :type required_capacity: float
        :param traversal_probability: The traversal_probability of this VNFLink.  # noqa: E501
        :type traversal_probability: float
        :param latency: The latency of this VNFLink.  # noqa: E501
        :type latency: float
        """
        self.swagger_types = {
            'id': str,
            'required_capacity': float,
            'traversal_probability': float,
            'latency': float
        }

        self.attribute_map = {
            'id': 'id',
            'required_capacity': 'required_capacity',
            'traversal_probability': 'traversal_probability',
            'latency': 'latency'
        }
        self._id = id
        self._required_capacity = required_capacity
        self._traversal_probability = traversal_probability
        self._latency = latency

    @classmethod
    def from_dict(cls, dikt) -> 'VNFLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VNFLink of this VNFLink.  # noqa: E501
        :rtype: VNFLink
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this VNFLink.

        Unique Virtual Link identifier  # noqa: E501

        :return: The id of this VNFLink.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this VNFLink.

        Unique Virtual Link identifier  # noqa: E501

        :param id: The id of this VNFLink.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def required_capacity(self) -> float:
        """Gets the required_capacity of this VNFLink.

        Maximum volume of traffic/s expected between these two VNFs and along this direction, and thus required capacity for the underlying VL between the NFVIPoPs that the two VNFs will be placed.  # noqa: E501

        :return: The required_capacity of this VNFLink.
        :rtype: float
        """
        return self._required_capacity

    @required_capacity.setter
    def required_capacity(self, required_capacity: float):
        """Sets the required_capacity of this VNFLink.

        Maximum volume of traffic/s expected between these two VNFs and along this direction, and thus required capacity for the underlying VL between the NFVIPoPs that the two VNFs will be placed.  # noqa: E501

        :param required_capacity: The required_capacity of this VNFLink.
        :type required_capacity: float
        """

        self._required_capacity = required_capacity

    @property
    def traversal_probability(self) -> float:
        """Gets the traversal_probability of this VNFLink.

        Probability that a request traverses this link. This allows for branchesin the VNFFG (e.g., for load  balancing, etc.). If this parameter is omitted, it is assumed equal to 1.  # noqa: E501

        :return: The traversal_probability of this VNFLink.
        :rtype: float
        """
        return self._traversal_probability

    @traversal_probability.setter
    def traversal_probability(self, traversal_probability: float):
        """Sets the traversal_probability of this VNFLink.

        Probability that a request traverses this link. This allows for branchesin the VNFFG (e.g., for load  balancing, etc.). If this parameter is omitted, it is assumed equal to 1.  # noqa: E501

        :param traversal_probability: The traversal_probability of this VNFLink.
        :type traversal_probability: float
        """

        self._traversal_probability = traversal_probability

    @property
    def latency(self) -> float:
        """Gets the latency of this VNFLink.

        Maximum latency in ms  # noqa: E501

        :return: The latency of this VNFLink.
        :rtype: float
        """
        return self._latency

    @latency.setter
    def latency(self, latency: float):
        """Sets the latency of this VNFLink.

        Maximum latency in ms  # noqa: E501

        :param latency: The latency of this VNFLink.
        :type latency: float
        """

        self._latency = latency
