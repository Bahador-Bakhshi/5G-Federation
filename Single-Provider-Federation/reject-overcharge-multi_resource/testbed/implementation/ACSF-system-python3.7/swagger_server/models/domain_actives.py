# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.active_instances import ActiveInstances  # noqa: F401,E501
from swagger_server import util


class DomainActives(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, domainid: str=None, activelist: List[ActiveInstances]=None):  # noqa: E501
        """DomainActives - a model defined in Swagger

        :param domainid: The domainid of this DomainActives.  # noqa: E501
        :type domainid: str
        :param activelist: The activelist of this DomainActives.  # noqa: E501
        :type activelist: List[ActiveInstances]
        """
        self.swagger_types = {
            'domainid': str,
            'activelist': List[ActiveInstances]
        }

        self.attribute_map = {
            'domainid': 'domainid',
            'activelist': 'activelist'
        }
        self._domainid = domainid
        self._activelist = activelist

    @classmethod
    def from_dict(cls, dikt) -> 'DomainActives':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DomainActives of this DomainActives.  # noqa: E501
        :rtype: DomainActives
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domainid(self) -> str:
        """Gets the domainid of this DomainActives.

        The id of the domain  # noqa: E501

        :return: The domainid of this DomainActives.
        :rtype: str
        """
        return self._domainid

    @domainid.setter
    def domainid(self, domainid: str):
        """Sets the domainid of this DomainActives.

        The id of the domain  # noqa: E501

        :param domainid: The domainid of this DomainActives.
        :type domainid: str
        """
        if domainid is None:
            raise ValueError("Invalid value for `domainid`, must not be `None`")  # noqa: E501

        self._domainid = domainid

    @property
    def activelist(self) -> List[ActiveInstances]:
        """Gets the activelist of this DomainActives.

        Array of active services in a domain  # noqa: E501

        :return: The activelist of this DomainActives.
        :rtype: List[ActiveInstances]
        """
        return self._activelist

    @activelist.setter
    def activelist(self, activelist: List[ActiveInstances]):
        """Sets the activelist of this DomainActives.

        Array of active services in a domain  # noqa: E501

        :param activelist: The activelist of this DomainActives.
        :type activelist: List[ActiveInstances]
        """
        if activelist is None:
            raise ValueError("Invalid value for `activelist`, must not be `None`")  # noqa: E501

        self._activelist = activelist
