# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.domains_active_services import DomainsActiveServices  # noqa: F401,E501
from swagger_server.models.domains_resources import DomainsResources  # noqa: F401,E501
from swagger_server.models.network_service import NetworkService  # noqa: F401,E501
from swagger_server import util


class ACRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, nsd: NetworkService=None, available: DomainsResources=None, actives: DomainsActiveServices=None):  # noqa: E501
        """ACRequest - a model defined in Swagger

        :param nsd: The nsd of this ACRequest.  # noqa: E501
        :type nsd: NetworkService
        :param available: The available of this ACRequest.  # noqa: E501
        :type available: DomainsResources
        :param actives: The actives of this ACRequest.  # noqa: E501
        :type actives: DomainsActiveServices
        """
        self.swagger_types = {
            'nsd': NetworkService,
            'available': DomainsResources,
            'actives': DomainsActiveServices
        }

        self.attribute_map = {
            'nsd': 'nsd',
            'available': 'available',
            'actives': 'actives'
        }
        self._nsd = nsd
        self._available = available
        self._actives = actives

    @classmethod
    def from_dict(cls, dikt) -> 'ACRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ACRequest of this ACRequest.  # noqa: E501
        :rtype: ACRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nsd(self) -> NetworkService:
        """Gets the nsd of this ACRequest.


        :return: The nsd of this ACRequest.
        :rtype: NetworkService
        """
        return self._nsd

    @nsd.setter
    def nsd(self, nsd: NetworkService):
        """Sets the nsd of this ACRequest.


        :param nsd: The nsd of this ACRequest.
        :type nsd: NetworkService
        """
        if nsd is None:
            raise ValueError("Invalid value for `nsd`, must not be `None`")  # noqa: E501

        self._nsd = nsd

    @property
    def available(self) -> DomainsResources:
        """Gets the available of this ACRequest.


        :return: The available of this ACRequest.
        :rtype: DomainsResources
        """
        return self._available

    @available.setter
    def available(self, available: DomainsResources):
        """Sets the available of this ACRequest.


        :param available: The available of this ACRequest.
        :type available: DomainsResources
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")  # noqa: E501

        self._available = available

    @property
    def actives(self) -> DomainsActiveServices:
        """Gets the actives of this ACRequest.


        :return: The actives of this ACRequest.
        :rtype: DomainsActiveServices
        """
        return self._actives

    @actives.setter
    def actives(self, actives: DomainsActiveServices):
        """Sets the actives of this ACRequest.


        :param actives: The actives of this ACRequest.
        :type actives: DomainsActiveServices
        """
        if actives is None:
            raise ValueError("Invalid value for `actives`, must not be `None`")  # noqa: E501

        self._actives = actives
