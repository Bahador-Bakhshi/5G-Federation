# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ACResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, reject: bool=None, domain: str=None):  # noqa: E501
        """ACResponse - a model defined in Swagger

        :param reject: The reject of this ACResponse.  # noqa: E501
        :type reject: bool
        :param domain: The domain of this ACResponse.  # noqa: E501
        :type domain: str
        """
        self.swagger_types = {
            'reject': bool,
            'domain': str
        }

        self.attribute_map = {
            'reject': 'reject',
            'domain': 'domain'
        }
        self._reject = reject
        self._domain = domain

    @classmethod
    def from_dict(cls, dikt) -> 'ACResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ACResponse of this ACResponse.  # noqa: E501
        :rtype: ACResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reject(self) -> bool:
        """Gets the reject of this ACResponse.

        If this is true, the service request should be rejected  # noqa: E501

        :return: The reject of this ACResponse.
        :rtype: bool
        """
        return self._reject

    @reject.setter
    def reject(self, reject: bool):
        """Sets the reject of this ACResponse.

        If this is true, the service request should be rejected  # noqa: E501

        :param reject: The reject of this ACResponse.
        :type reject: bool
        """
        if reject is None:
            raise ValueError("Invalid value for `reject`, must not be `None`")  # noqa: E501

        self._reject = reject

    @property
    def domain(self) -> str:
        """Gets the domain of this ACResponse.

        If the \"reject\" is false, this is the id of the domain to deploy this service  # noqa: E501

        :return: The domain of this ACResponse.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: str):
        """Sets the domain of this ACResponse.

        If the \"reject\" is false, this is the id of the domain to deploy this service  # noqa: E501

        :param domain: The domain of this ACResponse.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain
