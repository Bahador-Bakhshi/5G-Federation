# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.coordinate import Coordinate  # noqa: F401,E501
from swagger_server import util


class Location(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, center: Coordinate=None, radius: float=None):  # noqa: E501
        """Location - a model defined in Swagger

        :param center: The center of this Location.  # noqa: E501
        :type center: Coordinate
        :param radius: The radius of this Location.  # noqa: E501
        :type radius: float
        """
        self.swagger_types = {
            'center': Coordinate,
            'radius': float
        }

        self.attribute_map = {
            'center': 'center',
            'radius': 'radius'
        }
        self._center = center
        self._radius = radius

    @classmethod
    def from_dict(cls, dikt) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The location of this Location.  # noqa: E501
        :rtype: Location
        """
        return util.deserialize_model(dikt, cls)

    @property
    def center(self) -> Coordinate:
        """Gets the center of this Location.


        :return: The center of this Location.
        :rtype: Coordinate
        """
        return self._center

    @center.setter
    def center(self, center: Coordinate):
        """Sets the center of this Location.


        :param center: The center of this Location.
        :type center: Coordinate
        """

        self._center = center

    @property
    def radius(self) -> float:
        """Gets the radius of this Location.

        Location ball radius  # noqa: E501

        :return: The radius of this Location.
        :rtype: float
        """
        return self._radius

    @radius.setter
    def radius(self, radius: float):
        """Sets the radius of this Location.

        Location ball radius  # noqa: E501

        :param radius: The radius of this Location.
        :type radius: float
        """
        if radius is None:
            raise ValueError("Invalid value for `radius`, must not be `None`")  # noqa: E501

        self._radius = radius
